// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_admin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_admin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_admin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_admin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_admin_2eproto;
namespace mq {
class garbageRecive;
class garbageReciveDefaultTypeInternal;
extern garbageReciveDefaultTypeInternal _garbageRecive_default_instance_;
class getExchangeTypeRequest;
class getExchangeTypeRequestDefaultTypeInternal;
extern getExchangeTypeRequestDefaultTypeInternal _getExchangeTypeRequest_default_instance_;
class getExchangeTypeResponce;
class getExchangeTypeResponceDefaultTypeInternal;
extern getExchangeTypeResponceDefaultTypeInternal _getExchangeTypeResponce_default_instance_;
class userInfoRequest;
class userInfoRequestDefaultTypeInternal;
extern userInfoRequestDefaultTypeInternal _userInfoRequest_default_instance_;
class userInfoResponce;
class userInfoResponceDefaultTypeInternal;
extern userInfoResponceDefaultTypeInternal _userInfoResponce_default_instance_;
}  // namespace mq
PROTOBUF_NAMESPACE_OPEN
template<> ::mq::garbageRecive* Arena::CreateMaybeMessage<::mq::garbageRecive>(Arena*);
template<> ::mq::getExchangeTypeRequest* Arena::CreateMaybeMessage<::mq::getExchangeTypeRequest>(Arena*);
template<> ::mq::getExchangeTypeResponce* Arena::CreateMaybeMessage<::mq::getExchangeTypeResponce>(Arena*);
template<> ::mq::userInfoRequest* Arena::CreateMaybeMessage<::mq::userInfoRequest>(Arena*);
template<> ::mq::userInfoResponce* Arena::CreateMaybeMessage<::mq::userInfoResponce>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mq {

enum UserOptions : int {
  SELECT = 0,
  MODIFY = 1,
  DELETE = 2,
  UserOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserOptions_IsValid(int value);
constexpr UserOptions UserOptions_MIN = SELECT;
constexpr UserOptions UserOptions_MAX = DELETE;
constexpr int UserOptions_ARRAYSIZE = UserOptions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserOptions_descriptor();
template<typename T>
inline const std::string& UserOptions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserOptions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserOptions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserOptions_descriptor(), enum_t_value);
}
inline bool UserOptions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserOptions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserOptions>(
    UserOptions_descriptor(), name, value);
}
// ===================================================================

class userInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.userInfoRequest) */ {
 public:
  inline userInfoRequest() : userInfoRequest(nullptr) {}
  virtual ~userInfoRequest();

  userInfoRequest(const userInfoRequest& from);
  userInfoRequest(userInfoRequest&& from) noexcept
    : userInfoRequest() {
    *this = ::std::move(from);
  }

  inline userInfoRequest& operator=(const userInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline userInfoRequest& operator=(userInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const userInfoRequest& default_instance();

  static inline const userInfoRequest* internal_default_instance() {
    return reinterpret_cast<const userInfoRequest*>(
               &_userInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(userInfoRequest& a, userInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(userInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(userInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline userInfoRequest* New() const final {
    return CreateMaybeMessage<userInfoRequest>(nullptr);
  }

  userInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<userInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const userInfoRequest& from);
  void MergeFrom(const userInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(userInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.userInfoRequest";
  }
  protected:
  explicit userInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_admin_2eproto);
    return ::descriptor_table_admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:mq.userInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class userInfoResponce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.userInfoResponce) */ {
 public:
  inline userInfoResponce() : userInfoResponce(nullptr) {}
  virtual ~userInfoResponce();

  userInfoResponce(const userInfoResponce& from);
  userInfoResponce(userInfoResponce&& from) noexcept
    : userInfoResponce() {
    *this = ::std::move(from);
  }

  inline userInfoResponce& operator=(const userInfoResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline userInfoResponce& operator=(userInfoResponce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const userInfoResponce& default_instance();

  static inline const userInfoResponce* internal_default_instance() {
    return reinterpret_cast<const userInfoResponce*>(
               &_userInfoResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(userInfoResponce& a, userInfoResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(userInfoResponce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(userInfoResponce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline userInfoResponce* New() const final {
    return CreateMaybeMessage<userInfoResponce>(nullptr);
  }

  userInfoResponce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<userInfoResponce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const userInfoResponce& from);
  void MergeFrom(const userInfoResponce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(userInfoResponce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.userInfoResponce";
  }
  protected:
  explicit userInfoResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_admin_2eproto);
    return ::descriptor_table_admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kUserInfosFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string user_infos = 3;
  void clear_user_infos();
  const std::string& user_infos() const;
  void set_user_infos(const std::string& value);
  void set_user_infos(std::string&& value);
  void set_user_infos(const char* value);
  void set_user_infos(const char* value, size_t size);
  std::string* mutable_user_infos();
  std::string* release_user_infos();
  void set_allocated_user_infos(std::string* user_infos);
  private:
  const std::string& _internal_user_infos() const;
  void _internal_set_user_infos(const std::string& value);
  std::string* _internal_mutable_user_infos();
  public:

  // @@protoc_insertion_point(class_scope:mq.userInfoResponce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class garbageRecive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.garbageRecive) */ {
 public:
  inline garbageRecive() : garbageRecive(nullptr) {}
  virtual ~garbageRecive();

  garbageRecive(const garbageRecive& from);
  garbageRecive(garbageRecive&& from) noexcept
    : garbageRecive() {
    *this = ::std::move(from);
  }

  inline garbageRecive& operator=(const garbageRecive& from) {
    CopyFrom(from);
    return *this;
  }
  inline garbageRecive& operator=(garbageRecive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const garbageRecive& default_instance();

  static inline const garbageRecive* internal_default_instance() {
    return reinterpret_cast<const garbageRecive*>(
               &_garbageRecive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(garbageRecive& a, garbageRecive& b) {
    a.Swap(&b);
  }
  inline void Swap(garbageRecive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(garbageRecive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline garbageRecive* New() const final {
    return CreateMaybeMessage<garbageRecive>(nullptr);
  }

  garbageRecive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<garbageRecive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const garbageRecive& from);
  void MergeFrom(const garbageRecive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(garbageRecive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.garbageRecive";
  }
  protected:
  explicit garbageRecive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_admin_2eproto);
    return ::descriptor_table_admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:mq.garbageRecive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class getExchangeTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.getExchangeTypeRequest) */ {
 public:
  inline getExchangeTypeRequest() : getExchangeTypeRequest(nullptr) {}
  virtual ~getExchangeTypeRequest();

  getExchangeTypeRequest(const getExchangeTypeRequest& from);
  getExchangeTypeRequest(getExchangeTypeRequest&& from) noexcept
    : getExchangeTypeRequest() {
    *this = ::std::move(from);
  }

  inline getExchangeTypeRequest& operator=(const getExchangeTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getExchangeTypeRequest& operator=(getExchangeTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getExchangeTypeRequest& default_instance();

  static inline const getExchangeTypeRequest* internal_default_instance() {
    return reinterpret_cast<const getExchangeTypeRequest*>(
               &_getExchangeTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getExchangeTypeRequest& a, getExchangeTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getExchangeTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getExchangeTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getExchangeTypeRequest* New() const final {
    return CreateMaybeMessage<getExchangeTypeRequest>(nullptr);
  }

  getExchangeTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getExchangeTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getExchangeTypeRequest& from);
  void MergeFrom(const getExchangeTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getExchangeTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.getExchangeTypeRequest";
  }
  protected:
  explicit getExchangeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_admin_2eproto);
    return ::descriptor_table_admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // @@protoc_insertion_point(class_scope:mq.getExchangeTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_admin_2eproto;
};
// -------------------------------------------------------------------

class getExchangeTypeResponce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.getExchangeTypeResponce) */ {
 public:
  inline getExchangeTypeResponce() : getExchangeTypeResponce(nullptr) {}
  virtual ~getExchangeTypeResponce();

  getExchangeTypeResponce(const getExchangeTypeResponce& from);
  getExchangeTypeResponce(getExchangeTypeResponce&& from) noexcept
    : getExchangeTypeResponce() {
    *this = ::std::move(from);
  }

  inline getExchangeTypeResponce& operator=(const getExchangeTypeResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline getExchangeTypeResponce& operator=(getExchangeTypeResponce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getExchangeTypeResponce& default_instance();

  static inline const getExchangeTypeResponce* internal_default_instance() {
    return reinterpret_cast<const getExchangeTypeResponce*>(
               &_getExchangeTypeResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getExchangeTypeResponce& a, getExchangeTypeResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(getExchangeTypeResponce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getExchangeTypeResponce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getExchangeTypeResponce* New() const final {
    return CreateMaybeMessage<getExchangeTypeResponce>(nullptr);
  }

  getExchangeTypeResponce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getExchangeTypeResponce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getExchangeTypeResponce& from);
  void MergeFrom(const getExchangeTypeResponce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getExchangeTypeResponce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.getExchangeTypeResponce";
  }
  protected:
  explicit getExchangeTypeResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_admin_2eproto);
    return ::descriptor_table_admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mq.getExchangeTypeResponce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_admin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// userInfoRequest

// string rid = 1;
inline void userInfoRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& userInfoRequest::rid() const {
  // @@protoc_insertion_point(field_get:mq.userInfoRequest.rid)
  return _internal_rid();
}
inline void userInfoRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:mq.userInfoRequest.rid)
}
inline std::string* userInfoRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:mq.userInfoRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& userInfoRequest::_internal_rid() const {
  return rid_.Get();
}
inline void userInfoRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void userInfoRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.userInfoRequest.rid)
}
inline void userInfoRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.userInfoRequest.rid)
}
inline void userInfoRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.userInfoRequest.rid)
}
inline std::string* userInfoRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* userInfoRequest::release_rid() {
  // @@protoc_insertion_point(field_release:mq.userInfoRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void userInfoRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.userInfoRequest.rid)
}

// string cid = 2;
inline void userInfoRequest::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& userInfoRequest::cid() const {
  // @@protoc_insertion_point(field_get:mq.userInfoRequest.cid)
  return _internal_cid();
}
inline void userInfoRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:mq.userInfoRequest.cid)
}
inline std::string* userInfoRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:mq.userInfoRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& userInfoRequest::_internal_cid() const {
  return cid_.Get();
}
inline void userInfoRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void userInfoRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.userInfoRequest.cid)
}
inline void userInfoRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.userInfoRequest.cid)
}
inline void userInfoRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.userInfoRequest.cid)
}
inline std::string* userInfoRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* userInfoRequest::release_cid() {
  // @@protoc_insertion_point(field_release:mq.userInfoRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void userInfoRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.userInfoRequest.cid)
}

// -------------------------------------------------------------------

// userInfoResponce

// string rid = 1;
inline void userInfoResponce::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& userInfoResponce::rid() const {
  // @@protoc_insertion_point(field_get:mq.userInfoResponce.rid)
  return _internal_rid();
}
inline void userInfoResponce::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:mq.userInfoResponce.rid)
}
inline std::string* userInfoResponce::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:mq.userInfoResponce.rid)
  return _internal_mutable_rid();
}
inline const std::string& userInfoResponce::_internal_rid() const {
  return rid_.Get();
}
inline void userInfoResponce::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void userInfoResponce::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.userInfoResponce.rid)
}
inline void userInfoResponce::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.userInfoResponce.rid)
}
inline void userInfoResponce::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.userInfoResponce.rid)
}
inline std::string* userInfoResponce::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* userInfoResponce::release_rid() {
  // @@protoc_insertion_point(field_release:mq.userInfoResponce.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void userInfoResponce::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.userInfoResponce.rid)
}

// string cid = 2;
inline void userInfoResponce::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& userInfoResponce::cid() const {
  // @@protoc_insertion_point(field_get:mq.userInfoResponce.cid)
  return _internal_cid();
}
inline void userInfoResponce::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:mq.userInfoResponce.cid)
}
inline std::string* userInfoResponce::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:mq.userInfoResponce.cid)
  return _internal_mutable_cid();
}
inline const std::string& userInfoResponce::_internal_cid() const {
  return cid_.Get();
}
inline void userInfoResponce::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void userInfoResponce::set_cid(std::string&& value) {
  
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.userInfoResponce.cid)
}
inline void userInfoResponce::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.userInfoResponce.cid)
}
inline void userInfoResponce::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.userInfoResponce.cid)
}
inline std::string* userInfoResponce::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* userInfoResponce::release_cid() {
  // @@protoc_insertion_point(field_release:mq.userInfoResponce.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void userInfoResponce::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.userInfoResponce.cid)
}

// string user_infos = 3;
inline void userInfoResponce::clear_user_infos() {
  user_infos_.ClearToEmpty();
}
inline const std::string& userInfoResponce::user_infos() const {
  // @@protoc_insertion_point(field_get:mq.userInfoResponce.user_infos)
  return _internal_user_infos();
}
inline void userInfoResponce::set_user_infos(const std::string& value) {
  _internal_set_user_infos(value);
  // @@protoc_insertion_point(field_set:mq.userInfoResponce.user_infos)
}
inline std::string* userInfoResponce::mutable_user_infos() {
  // @@protoc_insertion_point(field_mutable:mq.userInfoResponce.user_infos)
  return _internal_mutable_user_infos();
}
inline const std::string& userInfoResponce::_internal_user_infos() const {
  return user_infos_.Get();
}
inline void userInfoResponce::_internal_set_user_infos(const std::string& value) {
  
  user_infos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void userInfoResponce::set_user_infos(std::string&& value) {
  
  user_infos_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.userInfoResponce.user_infos)
}
inline void userInfoResponce::set_user_infos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_infos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.userInfoResponce.user_infos)
}
inline void userInfoResponce::set_user_infos(const char* value,
    size_t size) {
  
  user_infos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.userInfoResponce.user_infos)
}
inline std::string* userInfoResponce::_internal_mutable_user_infos() {
  
  return user_infos_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* userInfoResponce::release_user_infos() {
  // @@protoc_insertion_point(field_release:mq.userInfoResponce.user_infos)
  return user_infos_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void userInfoResponce::set_allocated_user_infos(std::string* user_infos) {
  if (user_infos != nullptr) {
    
  } else {
    
  }
  user_infos_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_infos,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.userInfoResponce.user_infos)
}

// -------------------------------------------------------------------

// garbageRecive

// string rid = 1;
inline void garbageRecive::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& garbageRecive::rid() const {
  // @@protoc_insertion_point(field_get:mq.garbageRecive.rid)
  return _internal_rid();
}
inline void garbageRecive::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:mq.garbageRecive.rid)
}
inline std::string* garbageRecive::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:mq.garbageRecive.rid)
  return _internal_mutable_rid();
}
inline const std::string& garbageRecive::_internal_rid() const {
  return rid_.Get();
}
inline void garbageRecive::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void garbageRecive::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.garbageRecive.rid)
}
inline void garbageRecive::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.garbageRecive.rid)
}
inline void garbageRecive::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.garbageRecive.rid)
}
inline std::string* garbageRecive::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* garbageRecive::release_rid() {
  // @@protoc_insertion_point(field_release:mq.garbageRecive.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void garbageRecive::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.garbageRecive.rid)
}

// string cid = 2;
inline void garbageRecive::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& garbageRecive::cid() const {
  // @@protoc_insertion_point(field_get:mq.garbageRecive.cid)
  return _internal_cid();
}
inline void garbageRecive::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:mq.garbageRecive.cid)
}
inline std::string* garbageRecive::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:mq.garbageRecive.cid)
  return _internal_mutable_cid();
}
inline const std::string& garbageRecive::_internal_cid() const {
  return cid_.Get();
}
inline void garbageRecive::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void garbageRecive::set_cid(std::string&& value) {
  
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.garbageRecive.cid)
}
inline void garbageRecive::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.garbageRecive.cid)
}
inline void garbageRecive::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.garbageRecive.cid)
}
inline std::string* garbageRecive::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* garbageRecive::release_cid() {
  // @@protoc_insertion_point(field_release:mq.garbageRecive.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void garbageRecive::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.garbageRecive.cid)
}

// -------------------------------------------------------------------

// getExchangeTypeRequest

// string rid = 1;
inline void getExchangeTypeRequest::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& getExchangeTypeRequest::rid() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeRequest.rid)
  return _internal_rid();
}
inline void getExchangeTypeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeRequest.rid)
}
inline std::string* getExchangeTypeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:mq.getExchangeTypeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& getExchangeTypeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void getExchangeTypeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getExchangeTypeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.getExchangeTypeRequest.rid)
}
inline void getExchangeTypeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.getExchangeTypeRequest.rid)
}
inline void getExchangeTypeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.getExchangeTypeRequest.rid)
}
inline std::string* getExchangeTypeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getExchangeTypeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:mq.getExchangeTypeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getExchangeTypeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.getExchangeTypeRequest.rid)
}

// string cid = 2;
inline void getExchangeTypeRequest::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& getExchangeTypeRequest::cid() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeRequest.cid)
  return _internal_cid();
}
inline void getExchangeTypeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeRequest.cid)
}
inline std::string* getExchangeTypeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:mq.getExchangeTypeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& getExchangeTypeRequest::_internal_cid() const {
  return cid_.Get();
}
inline void getExchangeTypeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getExchangeTypeRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.getExchangeTypeRequest.cid)
}
inline void getExchangeTypeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.getExchangeTypeRequest.cid)
}
inline void getExchangeTypeRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.getExchangeTypeRequest.cid)
}
inline std::string* getExchangeTypeRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getExchangeTypeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:mq.getExchangeTypeRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getExchangeTypeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.getExchangeTypeRequest.cid)
}

// string exchange_name = 3;
inline void getExchangeTypeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty();
}
inline const std::string& getExchangeTypeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeRequest.exchange_name)
  return _internal_exchange_name();
}
inline void getExchangeTypeRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeRequest.exchange_name)
}
inline std::string* getExchangeTypeRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:mq.getExchangeTypeRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& getExchangeTypeRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void getExchangeTypeRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getExchangeTypeRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.getExchangeTypeRequest.exchange_name)
}
inline void getExchangeTypeRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.getExchangeTypeRequest.exchange_name)
}
inline void getExchangeTypeRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.getExchangeTypeRequest.exchange_name)
}
inline std::string* getExchangeTypeRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getExchangeTypeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:mq.getExchangeTypeRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getExchangeTypeRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.getExchangeTypeRequest.exchange_name)
}

// -------------------------------------------------------------------

// getExchangeTypeResponce

// string rid = 1;
inline void getExchangeTypeResponce::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& getExchangeTypeResponce::rid() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeResponce.rid)
  return _internal_rid();
}
inline void getExchangeTypeResponce::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeResponce.rid)
}
inline std::string* getExchangeTypeResponce::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:mq.getExchangeTypeResponce.rid)
  return _internal_mutable_rid();
}
inline const std::string& getExchangeTypeResponce::_internal_rid() const {
  return rid_.Get();
}
inline void getExchangeTypeResponce::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getExchangeTypeResponce::set_rid(std::string&& value) {
  
  rid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.getExchangeTypeResponce.rid)
}
inline void getExchangeTypeResponce::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.getExchangeTypeResponce.rid)
}
inline void getExchangeTypeResponce::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.getExchangeTypeResponce.rid)
}
inline std::string* getExchangeTypeResponce::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getExchangeTypeResponce::release_rid() {
  // @@protoc_insertion_point(field_release:mq.getExchangeTypeResponce.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getExchangeTypeResponce::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.getExchangeTypeResponce.rid)
}

// string cid = 2;
inline void getExchangeTypeResponce::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& getExchangeTypeResponce::cid() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeResponce.cid)
  return _internal_cid();
}
inline void getExchangeTypeResponce::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeResponce.cid)
}
inline std::string* getExchangeTypeResponce::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:mq.getExchangeTypeResponce.cid)
  return _internal_mutable_cid();
}
inline const std::string& getExchangeTypeResponce::_internal_cid() const {
  return cid_.Get();
}
inline void getExchangeTypeResponce::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getExchangeTypeResponce::set_cid(std::string&& value) {
  
  cid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mq.getExchangeTypeResponce.cid)
}
inline void getExchangeTypeResponce::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mq.getExchangeTypeResponce.cid)
}
inline void getExchangeTypeResponce::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mq.getExchangeTypeResponce.cid)
}
inline std::string* getExchangeTypeResponce::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getExchangeTypeResponce::release_cid() {
  // @@protoc_insertion_point(field_release:mq.getExchangeTypeResponce.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getExchangeTypeResponce::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mq.getExchangeTypeResponce.cid)
}

// uint32 type = 3;
inline void getExchangeTypeResponce::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getExchangeTypeResponce::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getExchangeTypeResponce::type() const {
  // @@protoc_insertion_point(field_get:mq.getExchangeTypeResponce.type)
  return _internal_type();
}
inline void getExchangeTypeResponce::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void getExchangeTypeResponce::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mq.getExchangeTypeResponce.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mq::UserOptions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mq::UserOptions>() {
  return ::mq::UserOptions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_admin_2eproto
