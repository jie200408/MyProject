// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#include "admin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mq {
class userInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<userInfoRequest> _instance;
} _userInfoRequest_default_instance_;
class userInfoResponceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<userInfoResponce> _instance;
} _userInfoResponce_default_instance_;
class garbageReciveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<garbageRecive> _instance;
} _garbageRecive_default_instance_;
class getExchangeTypeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getExchangeTypeRequest> _instance;
} _getExchangeTypeRequest_default_instance_;
class getExchangeTypeResponceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getExchangeTypeResponce> _instance;
} _getExchangeTypeResponce_default_instance_;
}  // namespace mq
static void InitDefaultsscc_info_garbageRecive_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mq::_garbageRecive_default_instance_;
    new (ptr) ::mq::garbageRecive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_garbageRecive_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_garbageRecive_admin_2eproto}, {}};

static void InitDefaultsscc_info_getExchangeTypeRequest_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mq::_getExchangeTypeRequest_default_instance_;
    new (ptr) ::mq::getExchangeTypeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getExchangeTypeRequest_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_getExchangeTypeRequest_admin_2eproto}, {}};

static void InitDefaultsscc_info_getExchangeTypeResponce_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mq::_getExchangeTypeResponce_default_instance_;
    new (ptr) ::mq::getExchangeTypeResponce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getExchangeTypeResponce_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_getExchangeTypeResponce_admin_2eproto}, {}};

static void InitDefaultsscc_info_userInfoRequest_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mq::_userInfoRequest_default_instance_;
    new (ptr) ::mq::userInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_userInfoRequest_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_userInfoRequest_admin_2eproto}, {}};

static void InitDefaultsscc_info_userInfoResponce_admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mq::_userInfoResponce_default_instance_;
    new (ptr) ::mq::userInfoResponce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_userInfoResponce_admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_userInfoResponce_admin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_admin_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_admin_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_admin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_admin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::userInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mq::userInfoRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::mq::userInfoRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::userInfoResponce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mq::userInfoResponce, rid_),
  PROTOBUF_FIELD_OFFSET(::mq::userInfoResponce, cid_),
  PROTOBUF_FIELD_OFFSET(::mq::userInfoResponce, user_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::garbageRecive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mq::garbageRecive, rid_),
  PROTOBUF_FIELD_OFFSET(::mq::garbageRecive, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeRequest, exchange_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeResponce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeResponce, rid_),
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeResponce, cid_),
  PROTOBUF_FIELD_OFFSET(::mq::getExchangeTypeResponce, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mq::userInfoRequest)},
  { 7, -1, sizeof(::mq::userInfoResponce)},
  { 15, -1, sizeof(::mq::garbageRecive)},
  { 22, -1, sizeof(::mq::getExchangeTypeRequest)},
  { 30, -1, sizeof(::mq::getExchangeTypeResponce)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mq::_userInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mq::_userInfoResponce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mq::_garbageRecive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mq::_getExchangeTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mq::_getExchangeTypeResponce_default_instance_),
};

const char descriptor_table_protodef_admin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013admin.proto\022\002mq\"+\n\017userInfoRequest\022\013\n\003"
  "rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\"@\n\020userInfoRespon"
  "ce\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\nuser_inf"
  "os\030\003 \001(\t\")\n\rgarbageRecive\022\013\n\003rid\030\001 \001(\t\022\013"
  "\n\003cid\030\002 \001(\t\"I\n\026getExchangeTypeRequest\022\013\n"
  "\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\025\n\rexchange_name"
  "\030\003 \001(\t\"A\n\027getExchangeTypeResponce\022\013\n\003rid"
  "\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\014\n\004type\030\003 \001(\r*1\n\013Use"
  "rOptions\022\n\n\006SELECT\020\000\022\n\n\006MODIFY\020\001\022\n\n\006DELE"
  "TE\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_admin_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_admin_2eproto_sccs[5] = {
  &scc_info_garbageRecive_admin_2eproto.base,
  &scc_info_getExchangeTypeRequest_admin_2eproto.base,
  &scc_info_getExchangeTypeResponce_admin_2eproto.base,
  &scc_info_userInfoRequest_admin_2eproto.base,
  &scc_info_userInfoResponce_admin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_admin_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_admin_2eproto = {
  false, false, descriptor_table_protodef_admin_2eproto, "admin.proto", 372,
  &descriptor_table_admin_2eproto_once, descriptor_table_admin_2eproto_sccs, descriptor_table_admin_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_admin_2eproto::offsets,
  file_level_metadata_admin_2eproto, 5, file_level_enum_descriptors_admin_2eproto, file_level_service_descriptors_admin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_admin_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_admin_2eproto)), true);
namespace mq {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserOptions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_admin_2eproto);
  return file_level_enum_descriptors_admin_2eproto[0];
}
bool UserOptions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class userInfoRequest::_Internal {
 public:
};

userInfoRequest::userInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mq.userInfoRequest)
}
userInfoRequest::userInfoRequest(const userInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mq.userInfoRequest)
}

void userInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_userInfoRequest_admin_2eproto.base);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

userInfoRequest::~userInfoRequest() {
  // @@protoc_insertion_point(destructor:mq.userInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void userInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void userInfoRequest::ArenaDtor(void* object) {
  userInfoRequest* _this = reinterpret_cast< userInfoRequest* >(object);
  (void)_this;
}
void userInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void userInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const userInfoRequest& userInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_userInfoRequest_admin_2eproto.base);
  return *internal_default_instance();
}


void userInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.userInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* userInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.userInfoRequest.rid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.userInfoRequest.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* userInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.userInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.userInfoRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.userInfoRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.userInfoRequest)
  return target;
}

size_t userInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.userInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void userInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mq.userInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const userInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<userInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mq.userInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mq.userInfoRequest)
    MergeFrom(*source);
  }
}

void userInfoRequest::MergeFrom(const userInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mq.userInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid().size() > 0) {
    _internal_set_rid(from._internal_rid());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
}

void userInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mq.userInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userInfoRequest::CopyFrom(const userInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.userInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userInfoRequest::IsInitialized() const {
  return true;
}

void userInfoRequest::InternalSwap(userInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rid_.Swap(&other->rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata userInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class userInfoResponce::_Internal {
 public:
};

userInfoResponce::userInfoResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mq.userInfoResponce)
}
userInfoResponce::userInfoResponce(const userInfoResponce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  user_infos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_infos().empty()) {
    user_infos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_infos(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mq.userInfoResponce)
}

void userInfoResponce::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_userInfoResponce_admin_2eproto.base);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_infos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

userInfoResponce::~userInfoResponce() {
  // @@protoc_insertion_point(destructor:mq.userInfoResponce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void userInfoResponce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_infos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void userInfoResponce::ArenaDtor(void* object) {
  userInfoResponce* _this = reinterpret_cast< userInfoResponce* >(object);
  (void)_this;
}
void userInfoResponce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void userInfoResponce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const userInfoResponce& userInfoResponce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_userInfoResponce_admin_2eproto.base);
  return *internal_default_instance();
}


void userInfoResponce::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.userInfoResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  user_infos_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* userInfoResponce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.userInfoResponce.rid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.userInfoResponce.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_infos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.userInfoResponce.user_infos"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* userInfoResponce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.userInfoResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.userInfoResponce.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.userInfoResponce.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string user_infos = 3;
  if (this->user_infos().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_infos().data(), static_cast<int>(this->_internal_user_infos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.userInfoResponce.user_infos");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_infos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.userInfoResponce)
  return target;
}

size_t userInfoResponce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.userInfoResponce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string user_infos = 3;
  if (this->user_infos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_infos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void userInfoResponce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mq.userInfoResponce)
  GOOGLE_DCHECK_NE(&from, this);
  const userInfoResponce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<userInfoResponce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mq.userInfoResponce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mq.userInfoResponce)
    MergeFrom(*source);
  }
}

void userInfoResponce::MergeFrom(const userInfoResponce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mq.userInfoResponce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid().size() > 0) {
    _internal_set_rid(from._internal_rid());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.user_infos().size() > 0) {
    _internal_set_user_infos(from._internal_user_infos());
  }
}

void userInfoResponce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mq.userInfoResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userInfoResponce::CopyFrom(const userInfoResponce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.userInfoResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userInfoResponce::IsInitialized() const {
  return true;
}

void userInfoResponce::InternalSwap(userInfoResponce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rid_.Swap(&other->rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_infos_.Swap(&other->user_infos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata userInfoResponce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class garbageRecive::_Internal {
 public:
};

garbageRecive::garbageRecive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mq.garbageRecive)
}
garbageRecive::garbageRecive(const garbageRecive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mq.garbageRecive)
}

void garbageRecive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_garbageRecive_admin_2eproto.base);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

garbageRecive::~garbageRecive() {
  // @@protoc_insertion_point(destructor:mq.garbageRecive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void garbageRecive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void garbageRecive::ArenaDtor(void* object) {
  garbageRecive* _this = reinterpret_cast< garbageRecive* >(object);
  (void)_this;
}
void garbageRecive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void garbageRecive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const garbageRecive& garbageRecive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_garbageRecive_admin_2eproto.base);
  return *internal_default_instance();
}


void garbageRecive::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.garbageRecive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* garbageRecive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.garbageRecive.rid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.garbageRecive.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* garbageRecive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.garbageRecive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.garbageRecive.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.garbageRecive.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.garbageRecive)
  return target;
}

size_t garbageRecive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.garbageRecive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void garbageRecive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mq.garbageRecive)
  GOOGLE_DCHECK_NE(&from, this);
  const garbageRecive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<garbageRecive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mq.garbageRecive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mq.garbageRecive)
    MergeFrom(*source);
  }
}

void garbageRecive::MergeFrom(const garbageRecive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mq.garbageRecive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid().size() > 0) {
    _internal_set_rid(from._internal_rid());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
}

void garbageRecive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mq.garbageRecive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void garbageRecive::CopyFrom(const garbageRecive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.garbageRecive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool garbageRecive::IsInitialized() const {
  return true;
}

void garbageRecive::InternalSwap(garbageRecive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rid_.Swap(&other->rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata garbageRecive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getExchangeTypeRequest::_Internal {
 public:
};

getExchangeTypeRequest::getExchangeTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mq.getExchangeTypeRequest)
}
getExchangeTypeRequest::getExchangeTypeRequest(const getExchangeTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  exchange_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mq.getExchangeTypeRequest)
}

void getExchangeTypeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getExchangeTypeRequest_admin_2eproto.base);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

getExchangeTypeRequest::~getExchangeTypeRequest() {
  // @@protoc_insertion_point(destructor:mq.getExchangeTypeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getExchangeTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getExchangeTypeRequest::ArenaDtor(void* object) {
  getExchangeTypeRequest* _this = reinterpret_cast< getExchangeTypeRequest* >(object);
  (void)_this;
}
void getExchangeTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getExchangeTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getExchangeTypeRequest& getExchangeTypeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getExchangeTypeRequest_admin_2eproto.base);
  return *internal_default_instance();
}


void getExchangeTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.getExchangeTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getExchangeTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.getExchangeTypeRequest.rid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.getExchangeTypeRequest.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.getExchangeTypeRequest.exchange_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getExchangeTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.getExchangeTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.getExchangeTypeRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.getExchangeTypeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.getExchangeTypeRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.getExchangeTypeRequest)
  return target;
}

size_t getExchangeTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.getExchangeTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (this->exchange_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getExchangeTypeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mq.getExchangeTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getExchangeTypeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getExchangeTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mq.getExchangeTypeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mq.getExchangeTypeRequest)
    MergeFrom(*source);
  }
}

void getExchangeTypeRequest::MergeFrom(const getExchangeTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mq.getExchangeTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid().size() > 0) {
    _internal_set_rid(from._internal_rid());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.exchange_name().size() > 0) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
}

void getExchangeTypeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mq.getExchangeTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getExchangeTypeRequest::CopyFrom(const getExchangeTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.getExchangeTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getExchangeTypeRequest::IsInitialized() const {
  return true;
}

void getExchangeTypeRequest::InternalSwap(getExchangeTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rid_.Swap(&other->rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_name_.Swap(&other->exchange_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata getExchangeTypeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getExchangeTypeResponce::_Internal {
 public:
};

getExchangeTypeResponce::getExchangeTypeResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mq.getExchangeTypeResponce)
}
getExchangeTypeResponce::getExchangeTypeResponce(const getExchangeTypeResponce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rid().empty()) {
    rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rid(), 
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mq.getExchangeTypeResponce)
}

void getExchangeTypeResponce::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getExchangeTypeResponce_admin_2eproto.base);
  rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

getExchangeTypeResponce::~getExchangeTypeResponce() {
  // @@protoc_insertion_point(destructor:mq.getExchangeTypeResponce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getExchangeTypeResponce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getExchangeTypeResponce::ArenaDtor(void* object) {
  getExchangeTypeResponce* _this = reinterpret_cast< getExchangeTypeResponce* >(object);
  (void)_this;
}
void getExchangeTypeResponce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getExchangeTypeResponce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getExchangeTypeResponce& getExchangeTypeResponce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getExchangeTypeResponce_admin_2eproto.base);
  return *internal_default_instance();
}


void getExchangeTypeResponce::Clear() {
// @@protoc_insertion_point(message_clear_start:mq.getExchangeTypeResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getExchangeTypeResponce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.getExchangeTypeResponce.rid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mq.getExchangeTypeResponce.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getExchangeTypeResponce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mq.getExchangeTypeResponce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.getExchangeTypeResponce.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mq.getExchangeTypeResponce.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mq.getExchangeTypeResponce)
  return target;
}

size_t getExchangeTypeResponce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mq.getExchangeTypeResponce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (this->rid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getExchangeTypeResponce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mq.getExchangeTypeResponce)
  GOOGLE_DCHECK_NE(&from, this);
  const getExchangeTypeResponce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getExchangeTypeResponce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mq.getExchangeTypeResponce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mq.getExchangeTypeResponce)
    MergeFrom(*source);
  }
}

void getExchangeTypeResponce::MergeFrom(const getExchangeTypeResponce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mq.getExchangeTypeResponce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid().size() > 0) {
    _internal_set_rid(from._internal_rid());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void getExchangeTypeResponce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mq.getExchangeTypeResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getExchangeTypeResponce::CopyFrom(const getExchangeTypeResponce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mq.getExchangeTypeResponce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getExchangeTypeResponce::IsInitialized() const {
  return true;
}

void getExchangeTypeResponce::InternalSwap(getExchangeTypeResponce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rid_.Swap(&other->rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getExchangeTypeResponce::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mq::userInfoRequest* Arena::CreateMaybeMessage< ::mq::userInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::userInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::userInfoResponce* Arena::CreateMaybeMessage< ::mq::userInfoResponce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::userInfoResponce >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::garbageRecive* Arena::CreateMaybeMessage< ::mq::garbageRecive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::garbageRecive >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::getExchangeTypeRequest* Arena::CreateMaybeMessage< ::mq::getExchangeTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::getExchangeTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mq::getExchangeTypeResponce* Arena::CreateMaybeMessage< ::mq::getExchangeTypeResponce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mq::getExchangeTypeResponce >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
